import { aj } from "../config/arcjet.js";
import requestIp from "request-ip";

export const arcjetMiddleware = async (req, res, next) => {
  try {
    // âœ… 1) RÃ©cupÃ©ration de lâ€™IP du client
    const clientIp = requestIp.getClientIp(req);

    // âœ… 2) VÃ©rification stricte (fail-closed)
    if (!clientIp) {
      console.warn("Impossible de dÃ©terminer l'IP du client, requÃªte rejetÃ©e");
      return res.status(400).json({
        error: "Bad Request",
        message: "Impossible de dÃ©terminer l'adresse IP du client.",
      });
    }

    // âœ… 3) Protection Arcjet (limitation, bot, sÃ©curitÃ©)
    const decision = await aj.protect(req, {
      requested: 1,   // chaque requÃªte consomme 1 jeton
      ip: clientIp,   // IP explicite
    });

    // âœ… 4) DÃ©cision Arcjet
    if (decision.isDenied()) {
      if (decision.reason.isRateLimit()) {
        return res.status(429).json({
          error: "Trop de requÃªtes",
          message: "La limite de requÃªtes a Ã©tÃ© dÃ©passÃ©e. Veuillez rÃ©essayer plus tard.",
        });
      }

      if (decision.reason.isBot()) {
        return res.status(403).json({
          error: "AccÃ¨s refusÃ© au bot",
          message: "Les requÃªtes automatisÃ©es ne sont pas autorisÃ©es.",
        });
      }

      return res.status(403).json({
        error: "AccÃ¨s interdit",
        message: "AccÃ¨s refusÃ© par la politique de sÃ©curitÃ©.",
      });
    }

    // âœ… 5) Continuer si tout est OK
    next();
  } catch (error) {
    console.error("Erreur du middleware Arcjet :", error);

    // âœ… 6) SÃ©curitÃ© absolue : fail-closed (on BLOQUE)
    return res.status(503).json({
      error: "Service temporairement indisponible",
      message: "Le service de sÃ©curitÃ© est momentanÃ©ment indisponible. Veuillez rÃ©essayer.",
    });

    // ğŸ”„ Alternative si tu prÃ©fÃ¨res remonter lâ€™erreur :
    // next(error);
  }
};
